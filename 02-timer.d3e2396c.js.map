{"mappings":"AAyFe,IAAIA","sources":["src/js/02-timer.js"],"sourcesContent":["/** \n * Завдання 2 - таймер зворотного відліку\n\n Напиши скрипт таймера, який здійснює зворотний відлік до певної дати, \n який може використовуватися у блогах та інтернет-магазинах, сторінках реєстрації подій, під час технічного обслуговування тощо. \n\n\n\nБібліотека flatpickr(https://flatpickr.js.org/)\n\nВикористовуй бібліотеку flatpickr для того, \nщоб дозволити користувачеві кросбраузерно вибрати кінцеву дату і час в одному елементі інтерфейсу.\n Для того щоб підключити CSS код бібліотеки в проект, необхідно додати ще один імпорт, крім того, що описаний в документації.\n\n// Описаний в документації\n;\n// Додатковий імпорт стилів\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nБібліотека очікує, що її ініціалізують на елементі input[type=\"text\"], тому ми додали до HTML документу поле input#datetime-picker.\n\n<input type=\"text\" id=\"datetime-picker\" />\n\nДругим аргументом функції flatpickr(selector, options) можна передати необов'язковий об'єкт параметрів. \nМи підготували для тебе об'єкт, який потрібен для виконання завдання. \nРозберися, за що відповідає кожна властивість в документації «Options» (https://flatpickr.js.org/options/), і використовуй його у своєму коді.\n\n\n\nВибір дати\nМетод onClose() з об'єкта параметрів викликається щоразу під час закриття елемента інтерфейсу, який створює flatpickr. Саме у ньому варто обробляти дату, обрану користувачем. Параметр selectedDates - це масив обраних дат, тому ми беремо перший елемент.\n\nЯкщо користувач вибрав дату в минулому, покажи window.alert() з текстом \"Please choose a date in the future\".\nЯкщо користувач вибрав валідну дату (в майбутньому), кнопка «Start» стає активною.\nКнопка «Start» повинна бути неактивною доти, доки користувач не вибрав дату в майбутньому.\nНатисканням на кнопку «Start» починається відлік часу до обраної дати з моменту натискання.\nВідлік часу\nНатисканням на кнопку «Start» скрипт повинен обчислювати раз на секунду, скільки часу залишилось до вказаної дати, і оновлювати інтерфейс таймера, показуючи чотири цифри: дні, години, хвилини і секунди у форматі xx:xx:xx:xx.\n\nКількість днів може складатися з більше, ніж двох цифр.\nТаймер повинен зупинятися, коли дійшов до кінцевої дати, тобто 00:00:00:00.\nНЕ БУДЕМО УСКЛАДНЮВАТИ\nЯкщо таймер запущений, для того щоб вибрати нову дату і перезапустити його - необхідно перезавантажити сторінку.\n\nДля підрахунку значень використовуй готову функцію convertMs, де ms - різниця між кінцевою і поточною датою в мілісекундах.\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\nФорматування часу\nФункція convertMs() повертає об'єкт з розрахованим часом, що залишився до кінцевої дати. \nЗверни увагу, що вона не форматує результат. Тобто, якщо залишилося 4 хвилини або будь-якої іншої складової часу, \nто функція поверне 4, а не 04. В інтерфейсі таймера необхідно додавати 0, якщо в числі менше двох символів. \nНапиши функцію addLeadingZero(value), яка використовує метод padStart() і перед рендерингом інтефрейсу форматує значення.\n\nБібліотека повідомлень\nУВАГА\nНаступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n\nДля відображення повідомлень користувачеві, замість window.alert(), використовуй бібліотеку notiflix (https://github.com/notiflix/Notiflix#readme).\n*/\n\n\n// import flatpickr from \"flatpickr\";\n// import \"flatpickr/dist/flatpickr.min.css\";\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n  },\n};"],"names":["Date"],"version":3,"file":"02-timer.d3e2396c.js.map"}